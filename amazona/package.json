{
  "name": "amazona",
  "version": "1.0.0",
  "description": "1. Introduction\r 2. Install Tools\r 3. Create React App\r 4. Create Git Repository\r 5. List Products\r    1. create products array\r    2. add product images\r    3. render products\r    4. style products\r 6. Add page routing\r    1. npm i react-router-dom\r    2. create route for home screen\r    3. create router for product screen\r 7. Create Node.JS Server\r    1. run npm init in root folder\r    2. Update package.json set type: module\r    3. Add .js to imports\r    4. npm install express\r    5. create server.js\r    6. add start command as node backend/server.js\r    7. require express\r    8. create route for / return backend is ready.\r    9. move products.js from frontend to backend\r    10. create route for /api/products\r    11. return products\r    12. run npm start\r 8. Fetch Products From Backend\r    1. set proxy in package.json\r    2. npm install axios\r    3. use state hook\r    4. use effect hook\r    5. use reducer hook\r 9. Manage State By Reducer Hook\r    1. define reducer\r    2. update fetch data\r    3. get state from usReducer\r 10. Add bootstrap UI Framework\r     1. npm install react-bootstrap bootstrap\r     2. update App.js\r 11. Create Product and Rating Component\r     1. create Rating component\r     2. Create Product component\r     3. Use Rating component in Product component\r 12. Create Product Details Screen\r     1. fetch product from backend\r     2. create 3 columns for image, info and action\r 13. Create Loading and Message Component\r     1. create loading component\r     2. use spinner component\r     3. craete message component\r     4. create utils.js to define getError fuction\r 14. Create React Context For Add Item To Cart\r     1. Create React Context\r     2. define reducer\r     3. create store provider\r     4. implement add to cart button click handler\r 15. Complete Add To Cart\r     1. check exist item in the cart\r     2. check count in stock in backend\r 16. Create Cart Screen\r     1. create 2 columns\r     2. display items list\r     3. create action column\r 17. Complete Cart Screen\r     1. click handler for inc/dec item\r     2. click handler for remove item\r     3. click handler for checkout\r 18. Create Signin Screen\r     1. create sign in form\r     2. add email and password\r     3. add signin button\r 19. Connect To MongoDB Database\r     1. create atlas monogodb database\r     2. install local mongodb database\r     3. npm install mongoose\r     4. connect to mongodb database\r 20. Seed Sample Products\r     1. create Product model\r     2. create seed route\r     3. use route in server.js\r     4. seed sample product\r 21. Seed Sample Users\r     1. create user model\r     2. seed sample users\r 22. Create Signin Backend API\r     1. create signin api\r     2. npm install jsonwebtoken\r     3. define generateToken\r 23. Complete Signin Screen\r     1. handle submit action\r     2. save token in store and local storage\r     3. show user name in header\r 24. Create Shipping Screen\r     1. create form inputs\r     2. handle save shipping address\r     3. add checkout wizard bar\r 25. Create Sign Up Screen\r     1. create input forms\r     2. handle submit\r     3. create backend api\r 26. Implement Select Payment Method Screen\r     1. create input forms\r     2. handle submit\r 27. Create Place Order Screen\r     1. show cart items, payment and address\r     2. calculate order summary\r 28. Implement Place Order Action\r     1. handle place order action\r     2. create order create api\r 29. Create Order Screen\r     1. create backend api for order/:id\r     2. fetch order api in frontend\r     3. show order information in 2 cloumns\r 30. Pay Order By PayPal\r     1. generate paypal client id\r     2. create api to return client id\r     3. install react-paypal-js\r     4. use PayPalScriptProvider in index.js\r     5. use usePayPalScriptReducer in Order Screen\r     6. implement loadPaypalScript function\r     7. render paypal button\r     8. implement onApprove payment function\r     9. create pay order api in backend\r 31. Display Order History\r     1. create order screen\r     2. create order history api\r     3. use api in the frontend\r 32. Create Profile Screen\r     1. get user info from context\r     2. show user information\r     3. create user update api\r     4. update user info\r 33. Publish To Heroku\r     1. create and config node project\r     2. serve build folder in frontend folder\r     3. Create heroku account\r     4. connect it to github\r     5. Create mongodb atlas database\r     6. Set database connection in heroku env variables\r     7. Commit and push\r 34. Add Sidebar and Search Box\r     1. add sidebar\r     2. add search box\r 35. Create Search Screen\r     1. show filters\r     2. create api for searching products\r     3. display results\r 36. Create Admin Menu\r     1. define protected route component\r     2. define admin route component\r     3. add menu for admin in header\r 37. Create Dashboard Screen\r     1. create dashboard ui\r     2. implement backend api\r     3. connect ui to backend\r 38. Manage Products\r     1. create products list ui\r     2. implement backend api\r     3. fetch data\r 39. Create Product\r     1. create products button\r     2. implement backend api\r     3. handle on click\r 40. Create Edit Product\r     1. create edit button\r     2. create edit product ui\r     3. dispaly product info in the input boxes\r 41. Implement Update Product\r     1. create edit product backend api\r     2. handle update click\r 42. Upload Product Image\r     1. create cloudinary account\r     2. use the api key in env file\r     3. handle upload file\r     4. implement backend api to upload\r 43. Delete Product\r     1. show delete button\r     2. implement backend api\r     3. handle on click\r 44. List Orders\r     1. create order list screen\r     2. implement backen api\r     3. fetch and display orders\r 45. Deliver Order\r     1. add deliver button\r     2. handle click action\r     3. implement backen api for deliver\r 46. Delete Order\r     1. add delete button\r     2. handle click action\r     3. implement backen api for delete\r 47. List Users\r     1. create user list screen\r     2. implement backen api\r     3. fetch and display users\r 48. Edit User\r     1. create edit button\r     2. create edit product ui\r     3. dispaly product info in the input boxes\r     4. implement backend api\r     5. handle edit click\r 49. Delete User\r     1. add delete button\r     2. handle click action\r     3. implement backen api for delete\r 50. Choose Address On Google Map\r     1. create google map credentials\r     2. update .env file with Google Api Key\r     3. create api to send google api to frontend\r     4. create map screen\r     5. fetch google api\r     6. getUserLocation\r     7. install @react-google-maps/api\r     8. use it in shipping screen\r     9. apply map to the checkout screen\r 51. Email order receipt by mailgun\r     1. create mailgun account\r     2. add and verify your domain to mailgun\r     3. install mailgun-js\r     4. set api key in env file\r     5. change pay order in orderRouter\r     6. send email order receipt\r 52. Review Products\r     1. create submit review form\r     2. handle submit\r     3. implement backend api for review\r 53. Upload multiple Images\r     1. add images to product model\r     2. get images in edit screen\r     3. show images in product screen",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC"
}
