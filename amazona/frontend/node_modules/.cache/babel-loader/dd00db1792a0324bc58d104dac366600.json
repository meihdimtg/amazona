{"ast":null,"code":"var _jsxFileName = \"/Users/vaimiticianfarani/Desktop/react node js/amazona/frontend/src/screens/OrderScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useReducer } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport LoadingBox from '../components/LoadingBox';\nimport MessageBox from '../components/MessageBox';\nimport Store from '../Store'; // reducer va servir à donner la réponse à nos formulaire, voir la console.log\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'FETCH_REQUEST':\n      return { ...state,\n        loading: true,\n        error: ''\n      };\n\n    case 'FETCH_SUCCESS':\n      return { ...state,\n        loading: false,\n        order: action.payload,\n        error: ''\n      };\n\n    case 'FETCH_FAIL':\n      return { ...state,\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n} // nous ne mettons rien dans orders, car la valeur est l'id de ORDER.\n\n\nexport default function OrderScreen() {\n  _s();\n\n  const {\n    state\n  } = useContext(Store);\n  const {\n    userInfo\n  } = state;\n  const params = useParams();\n  const {\n    id: orderId\n  } = params;\n  const navigate = useNavigate();\n  const [{\n    loading,\n    error,\n    order\n  }, dispatch] = useReducer(reducer, {\n    loading: true,\n    order: {},\n    error: ''\n  });\n  useEffect(() => {\n    if (!userInfo) {\n      return navigate('/login');\n    }\n  }, []);\n  return loading ? /*#__PURE__*/_jsxDEV(LoadingBox, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this) : error ? /*#__PURE__*/_jsxDEV(MessageBox, {\n    variant: \"danger\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(OrderScreen, \"2OU2+muP/Lf4JMW0msgOKzrMdhU=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = OrderScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrderScreen\");","map":{"version":3,"sources":["/Users/vaimiticianfarani/Desktop/react node js/amazona/frontend/src/screens/OrderScreen.js"],"names":["React","useContext","useEffect","useReducer","useNavigate","useParams","LoadingBox","MessageBox","Store","reducer","state","action","type","loading","error","order","payload","OrderScreen","userInfo","params","id","orderId","navigate","dispatch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,UAAvC,QAAyD,OAAzD;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,kBAAvC;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,KAAP,MAAkB,UAAlB,C,CAEA;;;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC9B,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,eAAL;AACE,aAAO,EAAE,GAAGF,KAAL;AAAYG,QAAAA,OAAO,EAAE,IAArB;AAA2BC,QAAAA,KAAK,EAAE;AAAlC,OAAP;;AACF,SAAK,eAAL;AACE,aAAO,EAAE,GAAGJ,KAAL;AAAYG,QAAAA,OAAO,EAAE,KAArB;AAA4BE,QAAAA,KAAK,EAAEJ,MAAM,CAACK,OAA1C;AAAmDF,QAAAA,KAAK,EAAE;AAA1D,OAAP;;AACF,SAAK,YAAL;AACE,aAAO,EAAE,GAAGJ,KAAL;AAAYG,QAAAA,OAAO,EAAE,KAArB;AAA4BC,QAAAA,KAAK,EAAEH,MAAM,CAACK;AAA1C,OAAP;;AAEF;AACE,aAAON,KAAP;AATJ;AAWD,C,CAED;;;AACA,eAAe,SAASO,WAAT,GAAuB;AAAA;;AACpC,QAAM;AAAEP,IAAAA;AAAF,MAAYT,UAAU,CAACO,KAAD,CAA5B;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAeR,KAArB;AAEA,QAAMS,MAAM,GAAGd,SAAS,EAAxB;AACA,QAAM;AAAEe,IAAAA,EAAE,EAAEC;AAAN,MAAkBF,MAAxB;AACA,QAAMG,QAAQ,GAAGlB,WAAW,EAA5B;AAEA,QAAM,CAAC;AAAES,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,GAAD,EAA4BQ,QAA5B,IAAwCpB,UAAU,CAACM,OAAD,EAAU;AAChEI,IAAAA,OAAO,EAAE,IADuD;AAEhEE,IAAAA,KAAK,EAAE,EAFyD;AAGhED,IAAAA,KAAK,EAAE;AAHyD,GAAV,CAAxD;AAMAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACgB,QAAL,EAAe;AACb,aAAOI,QAAQ,CAAC,QAAD,CAAf;AACD;AACF,GAJQ,EAIN,EAJM,CAAT;AAKA,SAAOT,OAAO,gBACZ,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,UADY,GAEVC,KAAK,gBACP,QAAC,UAAD;AAAY,IAAA,OAAO,EAAC,QAApB;AAAA,cAA8BA;AAA9B;AAAA;AAAA;AAAA;AAAA,UADO,gBAGP;AAAA;AAAA;AAAA;AAAA,UALF;AAOD;;GA1BuBG,W;UAIPZ,S,EAEED,W;;;KANKa,W","sourcesContent":["import React, { useContext, useEffect, useReducer } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport LoadingBox from '../components/LoadingBox';\nimport MessageBox from '../components/MessageBox';\nimport Store from '../Store';\n\n// reducer va servir à donner la réponse à nos formulaire, voir la console.log\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'FETCH_REQUEST':\n      return { ...state, loading: true, error: '' };\n    case 'FETCH_SUCCESS':\n      return { ...state, loading: false, order: action.payload, error: '' };\n    case 'FETCH_FAIL':\n      return { ...state, loading: false, error: action.payload };\n\n    default:\n      return state;\n  }\n}\n\n// nous ne mettons rien dans orders, car la valeur est l'id de ORDER.\nexport default function OrderScreen() {\n  const { state } = useContext(Store);\n  const { userInfo } = state;\n\n  const params = useParams();\n  const { id: orderId } = params;\n  const navigate = useNavigate();\n\n  const [{ loading, error, order }, dispatch] = useReducer(reducer, {\n    loading: true,\n    order: {},\n    error: '',\n  });\n\n  useEffect(() => {\n    if (!userInfo) {\n      return navigate('/login');\n    }\n  }, []);\n  return loading ? (\n    <LoadingBox></LoadingBox>\n  ) : error ? (\n    <MessageBox variant=\"danger\">{error}</MessageBox>\n  ) : (\n    <div></div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}